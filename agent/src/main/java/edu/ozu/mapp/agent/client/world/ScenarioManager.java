/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ozu.mapp.agent.client.world;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import edu.ozu.mapp.agent.Agent;
import edu.ozu.mapp.agent.MAPPAgent;
import edu.ozu.mapp.agent.client.AgentClient;
import edu.ozu.mapp.agent.client.helpers.ConflictCheck;
import edu.ozu.mapp.agent.client.helpers.ConflictInfo;
import edu.ozu.mapp.config.AgentConfig;
import edu.ozu.mapp.system.WorldOverseer;
import edu.ozu.mapp.utils.Point;
import edu.ozu.mapp.utils.*;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;
import org.springframework.core.type.filter.AnnotationTypeFilter;
import org.springframework.util.Assert;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.AbstractTableModel;
import java.awt.*;
import java.awt.event.ItemEvent;
import java.io.*;
import java.lang.reflect.InvocationTargetException;
import java.util.*;
import java.util.concurrent.CompletableFuture;
import java.util.function.BiConsumer;
import java.util.stream.Collectors;

/**
 *
 * @author freedrone
 */
@SuppressWarnings({"FieldMayBeFinal"})
public class ScenarioManager extends javax.swing.JFrame
{
    private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(ScenarioManager.class);

    private boolean is_headless;
    private Font meslolgs;

    /**
     * Creates new form ScenarioManager
     */
    public ScenarioManager()
    {
        // default has gui, there for not headless
        this(false);
    }

    public ScenarioManager(boolean is_headless)
    {
        this.is_headless = is_headless;

        if (is_headless) {
            logger.warn("HEADLESS DESIGN IS NOT FULLY IMPLEMENTED");
        } else {
            try {
                InputStream stream = ClassLoader.getSystemClassLoader().getResourceAsStream("fonts/MesloLGS NF Regular.ttf");
                Assert.isTrue(stream != null, "file stream is null!");
                meslolgs = Font.createFont(Font.TRUETYPE_FONT, stream).deriveFont(12f);
            } catch (FontFormatException | IOException e) {
                e.printStackTrace();
            }

            initComponents();
        }

        // despite having no components, this is final step of creation function
        // perhaps renaming is in order
        onComponentsDidMount();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "Convert2Lambda", "MagicConstant", "DuplicatedCode", "Anonymous2MethodRef", "RedundantSuppression"})
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        file_chooser = new javax.swing.JFileChooser();
        popup_generating = new javax.swing.JDialog();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        cards_container = new javax.swing.JPanel();
        javax.swing.JPanel create_scenario = new javax.swing.JPanel();
        javax.swing.JPanel inputs_container = new javax.swing.JPanel();
        javax.swing.JLabel label_width = new javax.swing.JLabel();
        javax.swing.JLabel label_height = new javax.swing.JLabel();
        javax.swing.JLabel label_MinPathLength = new javax.swing.JLabel();
        javax.swing.JLabel label_MaxPathLength = new javax.swing.JLabel();
        javax.swing.JLabel label_min_dist_bw_agents = new javax.swing.JLabel();
        javax.swing.JLabel label_initial_tokens_per_agent = new javax.swing.JLabel();
        min_path_length_input = new javax.swing.JTextField();
        height_input = new javax.swing.JTextField();
        width_input = new javax.swing.JTextField();
        min_dist_bw_agents = new javax.swing.JTextField();
        max_path_length_input = new javax.swing.JTextField();
        input_initial_token_count_per_agent = new javax.swing.JTextField();
        javax.swing.Box.Filler filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 5), new java.awt.Dimension(0, 5), new java.awt.Dimension(32767, 10));
        javax.swing.Box.Filler filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 32767));
        javax.swing.Box.Filler filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(25, 0), new java.awt.Dimension(25, 0), new java.awt.Dimension(25, 32767));
        javax.swing.Box.Filler filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        javax.swing.Box.Filler filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 26), new java.awt.Dimension(0, 26), new java.awt.Dimension(0, 26));
        javax.swing.Box.Filler filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(26, 26), new java.awt.Dimension(26, 26), new java.awt.Dimension(26, 26));
        javax.swing.JLabel label_number_of_expected_conflicts = new javax.swing.JLabel();
        input_number_of_expected_conflicts = new javax.swing.JTextField();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        input_field_of_view = new javax.swing.JTextField();
        input_field_of_view.setText(String.valueOf(Globals.FIELD_OF_VIEW_SIZE));
        javax.swing.JPanel agent_list_container = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane2 = new javax.swing.JScrollPane();
        agents_table = new javax.swing.JTable();
        javax.swing.JPanel create_scenario_controls = new javax.swing.JPanel();
        generate_scenario_btn = new javax.swing.JButton();
        overview_scenario = new javax.swing.JPanel();
        javax.swing.JPanel scenario_summary_container = new javax.swing.JPanel();
        javax.swing.JLabel no_of_conflicts_label = new javax.swing.JLabel();
        number_of_conflicts_label = new javax.swing.JLabel();
        javax.swing.JLabel no_of_agents_label = new javax.swing.JLabel();
        number_of_agents_label = new javax.swing.JLabel();
        javax.swing.JLabel maxPathLenLabel = new javax.swing.JLabel();
        max_path_length_label = new javax.swing.JLabel();
        javax.swing.JLabel minPathLenLabel = new javax.swing.JLabel();
        min_path_length_label = new javax.swing.JLabel();
        javax.swing.JPanel agents_detail_list = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane3 = new javax.swing.JScrollPane();
        agent_detail_table = new javax.swing.JTable();
        javax.swing.JPanel overview_controls = new javax.swing.JPanel();
        javax.swing.JPanel previous_btn_container = new javax.swing.JPanel();
        javax.swing.JButton previous_btn = new javax.swing.JButton();
        javax.swing.JPanel run_btn_container = new javax.swing.JPanel();
        javax.swing.JButton run_btn = new javax.swing.JButton();
        javax.swing.JPanel run_scenario = new javax.swing.JPanel();
        javax.swing.JPanel scenario_info_container = new javax.swing.JPanel();
        horizontal_spliter = new javax.swing.JSplitPane();
        javax.swing.JPanel world_view_state_container = new javax.swing.JPanel();
        vertical_spliter = new javax.swing.JSplitPane();
        javax.swing.JTabbedPane world_tab_container = new javax.swing.JTabbedPane();
        world_view_tab = new javax.swing.JPanel();
        scenario_canvas = new edu.ozu.mapp.agent.client.world.ScenarioCanvas();
        javax.swing.JPanel world_controls = new javax.swing.JPanel();
        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        btn_cycle_states = new javax.swing.JToggleButton();
        javax.swing.JPanel jPanel2 = new javax.swing.JPanel();
        label_current_state = new javax.swing.JLabel();
        btn_next_state = new javax.swing.JButton();
        javax.swing.JTabbedPane world_history_tab_container = new javax.swing.JTabbedPane();
        history_panel = new edu.ozu.mapp.agent.client.world.WorldHistoryPanel();
        javax.swing.JTabbedPane logs_tab_container = new javax.swing.JTabbedPane();
        javax.swing.JPanel world_logs = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane1.getVerticalScrollBar().setUnitIncrement(14);
        jScrollPane1.getViewport().setScrollMode(JViewport.SIMPLE_SCROLL_MODE);
        scenario_info_pane = new edu.ozu.mapp.agent.client.world.LogDisplayPane();
        javax.swing.JPanel negotiation_logs = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane4 = new javax.swing.JScrollPane();
        jScrollPane4.getViewport().setScrollMode(JViewport.SIMPLE_SCROLL_MODE);
        negotiation_info_pane = new javax.swing.JTextPane();
        javax.swing.JPanel run_controls = new javax.swing.JPanel();
        javax.swing.JButton back_to_overview_btn = new javax.swing.JButton();
        javax.swing.JMenuBar jMenuBar1 = new javax.swing.JMenuBar();
        javax.swing.JMenu jMenu1 = new javax.swing.JMenu();
        javax.swing.JMenuItem export_btn = new javax.swing.JMenuItem();
        javax.swing.JMenuItem import_btn = new javax.swing.JMenuItem();

        popup_generating.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        popup_generating.setTitle(" ");
        popup_generating.setAlwaysOnTop(true);
        popup_generating.setBounds(new java.awt.Rectangle(0, 0, 200, 80));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Generating...");
        jLabel1.setPreferredSize(new java.awt.Dimension(120, 40));
        popup_generating.getContentPane().add(jLabel1, java.awt.BorderLayout.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 500));
        setPreferredSize(new java.awt.Dimension(800, 500));
        setSize(new java.awt.Dimension(800, 500));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        cards_container.setLayout(new java.awt.CardLayout());

        create_scenario.setBackground(new java.awt.Color(230, 230, 230));
        create_scenario.setMaximumSize(new java.awt.Dimension(600, 300));
        create_scenario.setMinimumSize(new java.awt.Dimension(600, 300));
        java.awt.GridBagLayout create_scenarioLayout = new java.awt.GridBagLayout();
        create_scenarioLayout.columnWeights = new double[] {1.0};
        create_scenarioLayout.rowWeights = new double[] {0.0, 1.0, 0.0};
        create_scenario.setLayout(create_scenarioLayout);

        inputs_container.setLayout(new java.awt.GridBagLayout());

        label_width.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        label_width.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_width.setText("Width");
        label_width.setPreferredSize(new java.awt.Dimension(80, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        inputs_container.add(label_width, gridBagConstraints);

        label_height.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        label_height.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_height.setText("Height");
        label_height.setPreferredSize(new java.awt.Dimension(80, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        inputs_container.add(label_height, gridBagConstraints);

        label_MinPathLength.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        label_MinPathLength.setText("Min Path Length");
        label_MinPathLength.setMaximumSize(new java.awt.Dimension(165, 18));
        label_MinPathLength.setMinimumSize(new java.awt.Dimension(165, 18));
        label_MinPathLength.setPreferredSize(new java.awt.Dimension(165, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        inputs_container.add(label_MinPathLength, gridBagConstraints);

        label_MaxPathLength.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        label_MaxPathLength.setText("Max Path Length");
        label_MaxPathLength.setMaximumSize(new java.awt.Dimension(165, 18));
        label_MaxPathLength.setMinimumSize(new java.awt.Dimension(165, 18));
        label_MaxPathLength.setPreferredSize(new java.awt.Dimension(165, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        inputs_container.add(label_MaxPathLength, gridBagConstraints);

        label_min_dist_bw_agents.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        label_min_dist_bw_agents.setText("min dist b/w agents");
        label_min_dist_bw_agents.setMaximumSize(new java.awt.Dimension(165, 18));
        label_min_dist_bw_agents.setMinimumSize(new java.awt.Dimension(165, 18));
        label_min_dist_bw_agents.setPreferredSize(new java.awt.Dimension(165, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        inputs_container.add(label_min_dist_bw_agents, gridBagConstraints);

        label_initial_tokens_per_agent.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        label_initial_tokens_per_agent.setText("Initial Tokens per Agent");
        label_initial_tokens_per_agent.setMaximumSize(new java.awt.Dimension(165, 18));
        label_initial_tokens_per_agent.setMinimumSize(new java.awt.Dimension(165, 18));
        label_initial_tokens_per_agent.setPreferredSize(new java.awt.Dimension(165, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 7;
        inputs_container.add(label_initial_tokens_per_agent, gridBagConstraints);

        min_path_length_input.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        min_path_length_input.setMinimumSize(new java.awt.Dimension(80, 35));
        min_path_length_input.setPreferredSize(new java.awt.Dimension(80, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        inputs_container.add(min_path_length_input, gridBagConstraints);

        height_input.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        height_input.setMinimumSize(new java.awt.Dimension(80, 35));
        height_input.setPreferredSize(new java.awt.Dimension(80, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        inputs_container.add(height_input, gridBagConstraints);

        width_input.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        width_input.setToolTipText("");
        width_input.setMinimumSize(new java.awt.Dimension(80, 35));
        width_input.setPreferredSize(new java.awt.Dimension(80, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        inputs_container.add(width_input, gridBagConstraints);

        min_dist_bw_agents.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        min_dist_bw_agents.setText("1");
        min_dist_bw_agents.setMinimumSize(new java.awt.Dimension(80, 35));
        min_dist_bw_agents.setPreferredSize(new java.awt.Dimension(80, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        inputs_container.add(min_dist_bw_agents, gridBagConstraints);

        max_path_length_input.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        max_path_length_input.setMinimumSize(new java.awt.Dimension(80, 35));
        max_path_length_input.setPreferredSize(new java.awt.Dimension(80, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        inputs_container.add(max_path_length_input, gridBagConstraints);

        input_initial_token_count_per_agent.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        input_initial_token_count_per_agent.setMinimumSize(new java.awt.Dimension(80, 35));
        input_initial_token_count_per_agent.setPreferredSize(new java.awt.Dimension(80, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        inputs_container.add(input_initial_token_count_per_agent, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        inputs_container.add(filler1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        inputs_container.add(filler2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        inputs_container.add(filler4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        inputs_container.add(filler3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        inputs_container.add(filler6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 2;
        inputs_container.add(filler5, gridBagConstraints);

        label_number_of_expected_conflicts.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        label_number_of_expected_conflicts.setText("no of expected conflicts");
        label_number_of_expected_conflicts.setMaximumSize(new java.awt.Dimension(165, 18));
        label_number_of_expected_conflicts.setMinimumSize(new java.awt.Dimension(165, 18));
        label_number_of_expected_conflicts.setPreferredSize(new java.awt.Dimension(165, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 2;
        inputs_container.add(label_number_of_expected_conflicts, gridBagConstraints);

        input_number_of_expected_conflicts.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        input_number_of_expected_conflicts.setMinimumSize(new java.awt.Dimension(80, 35));
        input_number_of_expected_conflicts.setPreferredSize(new java.awt.Dimension(80, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 2;
        inputs_container.add(input_number_of_expected_conflicts, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Field of View");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        inputs_container.add(jLabel2, gridBagConstraints);

        input_field_of_view.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        input_field_of_view.setPreferredSize(new java.awt.Dimension(80, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        inputs_container.add(input_field_of_view, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        create_scenario.add(inputs_container, gridBagConstraints);

        agent_list_container.setBackground(new java.awt.Color(238, 238, 230));
        agent_list_container.setPreferredSize(new java.awt.Dimension(600, 150));
        agent_list_container.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane2.setToolTipText("");

        agents_table.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        agents_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(agents_table);

        agent_list_container.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        create_scenario.add(agent_list_container, gridBagConstraints);

        create_scenario_controls.setMinimumSize(new java.awt.Dimension(100, 40));
        create_scenario_controls.setPreferredSize(new java.awt.Dimension(600, 40));
        create_scenario_controls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        generate_scenario_btn.setText("Generate");
        generate_scenario_btn.setPreferredSize(new java.awt.Dimension(100, 30));
        generate_scenario_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generate_scenario_btnActionPerformed(evt);
            }
        });
        create_scenario_controls.add(generate_scenario_btn);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        create_scenario.add(create_scenario_controls, gridBagConstraints);

        cards_container.add(create_scenario, "create");

        java.awt.GridBagLayout overview_scenarioLayout = new java.awt.GridBagLayout();
        overview_scenarioLayout.columnWeights = new double[] {1.0};
        overview_scenarioLayout.rowWeights = new double[] {0.0, 1.0, 0.0};
        overview_scenario.setLayout(overview_scenarioLayout);

        scenario_summary_container.setMinimumSize(new java.awt.Dimension(600, 110));
        scenario_summary_container.setPreferredSize(new java.awt.Dimension(600, 110));
        java.awt.GridBagLayout scenario_summary_containerLayout = new java.awt.GridBagLayout();
        scenario_summary_containerLayout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0};
        scenario_summary_containerLayout.rowHeights = new int[] {0, 5, 0, 5, 0};
        scenario_summary_container.setLayout(scenario_summary_containerLayout);

        no_of_conflicts_label.setText("Number of Conflicts");
        no_of_conflicts_label.setMaximumSize(new java.awt.Dimension(150, 18));
        no_of_conflicts_label.setMinimumSize(new java.awt.Dimension(150, 18));
        no_of_conflicts_label.setPreferredSize(new java.awt.Dimension(150, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        scenario_summary_container.add(no_of_conflicts_label, gridBagConstraints);

        number_of_conflicts_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        number_of_conflicts_label.setText("#");
        number_of_conflicts_label.setMaximumSize(new java.awt.Dimension(50, 18));
        number_of_conflicts_label.setMinimumSize(new java.awt.Dimension(50, 18));
        number_of_conflicts_label.setPreferredSize(new java.awt.Dimension(50, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        scenario_summary_container.add(number_of_conflicts_label, gridBagConstraints);

        no_of_agents_label.setText("Number of Agents");
        no_of_agents_label.setMaximumSize(new java.awt.Dimension(150, 18));
        no_of_agents_label.setMinimumSize(new java.awt.Dimension(150, 18));
        no_of_agents_label.setPreferredSize(new java.awt.Dimension(150, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        scenario_summary_container.add(no_of_agents_label, gridBagConstraints);

        number_of_agents_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        number_of_agents_label.setText("#");
        number_of_agents_label.setMaximumSize(new java.awt.Dimension(50, 18));
        number_of_agents_label.setMinimumSize(new java.awt.Dimension(50, 18));
        number_of_agents_label.setPreferredSize(new java.awt.Dimension(50, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        scenario_summary_container.add(number_of_agents_label, gridBagConstraints);

        maxPathLenLabel.setText("Max Path Length");
        maxPathLenLabel.setToolTipText("");
        maxPathLenLabel.setMaximumSize(new java.awt.Dimension(150, 18));
        maxPathLenLabel.setMinimumSize(new java.awt.Dimension(150, 18));
        maxPathLenLabel.setPreferredSize(new java.awt.Dimension(150, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        scenario_summary_container.add(maxPathLenLabel, gridBagConstraints);

        max_path_length_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        max_path_length_label.setText("#");
        max_path_length_label.setMaximumSize(new java.awt.Dimension(50, 18));
        max_path_length_label.setMinimumSize(new java.awt.Dimension(50, 18));
        max_path_length_label.setPreferredSize(new java.awt.Dimension(50, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        scenario_summary_container.add(max_path_length_label, gridBagConstraints);

        minPathLenLabel.setText("Min Path Length");
        minPathLenLabel.setMaximumSize(new java.awt.Dimension(150, 18));
        minPathLenLabel.setMinimumSize(new java.awt.Dimension(150, 18));
        minPathLenLabel.setPreferredSize(new java.awt.Dimension(150, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        scenario_summary_container.add(minPathLenLabel, gridBagConstraints);

        min_path_length_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        min_path_length_label.setText("#");
        min_path_length_label.setMaximumSize(new java.awt.Dimension(50, 18));
        min_path_length_label.setMinimumSize(new java.awt.Dimension(50, 18));
        min_path_length_label.setPreferredSize(new java.awt.Dimension(50, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 4;
        scenario_summary_container.add(min_path_length_label, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        overview_scenario.add(scenario_summary_container, gridBagConstraints);

        agents_detail_list.setLayout(new java.awt.BorderLayout());

        agent_detail_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(agent_detail_table);

        agents_detail_list.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        overview_scenario.add(agents_detail_list, gridBagConstraints);

        overview_controls.setMinimumSize(new java.awt.Dimension(100, 40));
        overview_controls.setPreferredSize(new java.awt.Dimension(600, 40));
        overview_controls.setLayout(new javax.swing.BoxLayout(overview_controls, javax.swing.BoxLayout.LINE_AXIS));

        previous_btn_container.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        previous_btn.setText("Previous");
        previous_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previous_btnActionPerformed(evt);
            }
        });
        previous_btn_container.add(previous_btn);

        overview_controls.add(previous_btn_container);

        run_btn_container.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        run_btn.setText("Run");
        run_btn.setMaximumSize(new java.awt.Dimension(80, 28));
        run_btn.setMinimumSize(new java.awt.Dimension(80, 28));
        run_btn.setPreferredSize(new java.awt.Dimension(80, 28));
        run_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                run_btnActionPerformed(evt);
            }
        });
        run_btn_container.add(run_btn);

        overview_controls.add(run_btn_container);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        overview_scenario.add(overview_controls, gridBagConstraints);

        cards_container.add(overview_scenario, "overview");

        java.awt.GridBagLayout run_scenarioLayout = new java.awt.GridBagLayout();
        run_scenarioLayout.columnWeights = new double[] {1.0};
        run_scenarioLayout.rowWeights = new double[] {1.0, 0.0};
        run_scenario.setLayout(run_scenarioLayout);

        scenario_info_container.setPreferredSize(new java.awt.Dimension(400, 150));
        scenario_info_container.setLayout(new java.awt.GridLayout(1, 0));

        horizontal_spliter.setDividerLocation(300);
        horizontal_spliter.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        horizontal_spliter.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                splitterPropertyChange(evt);
            }
        });

        world_view_state_container.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        world_view_state_container.setMinimumSize(new java.awt.Dimension(300, 300));
        world_view_state_container.setPreferredSize(new java.awt.Dimension(300, 300));
        world_view_state_container.setLayout(new java.awt.BorderLayout());

        vertical_spliter.setDividerLocation(300);
        vertical_spliter.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        vertical_spliter.setToolTipText("");
        vertical_spliter.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        vertical_spliter.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                splitterPropertyChange(evt);
            }
        });

        world_view_tab.setLayout(new java.awt.BorderLayout());
        world_view_tab.add(scenario_canvas, java.awt.BorderLayout.CENTER);

        world_controls.setMinimumSize(new java.awt.Dimension(80, 80));
        world_controls.setPreferredSize(new java.awt.Dimension(80, 40));
        world_controls.setLayout(new java.awt.BorderLayout());

        btn_cycle_states.setText("Cycle");
        btn_cycle_states.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                btn_cycle_statesItemStateChanged(evt);
            }
        });
        jPanel1.add(btn_cycle_states);

        world_controls.add(jPanel1, java.awt.BorderLayout.WEST);

        label_current_state.setText("-current-state-");
        jPanel2.add(label_current_state);

        btn_next_state.setText("Next State");
        btn_next_state.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_next_stateActionPerformed(evt);
            }
        });
        jPanel2.add(btn_next_state);

        world_controls.add(jPanel2, java.awt.BorderLayout.EAST);

        world_view_tab.add(world_controls, java.awt.BorderLayout.PAGE_END);

        world_tab_container.addTab("World View", world_view_tab);

        vertical_spliter.setTopComponent(world_tab_container);

        world_history_tab_container.addTab("World History", history_panel);

        vertical_spliter.setBottomComponent(world_history_tab_container);
        world_history_tab_container.getAccessibleContext().setAccessibleName("");

        world_view_state_container.add(vertical_spliter, java.awt.BorderLayout.CENTER);

        horizontal_spliter.setLeftComponent(world_view_state_container);

        world_logs.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setAutoscrolls(true);

        scenario_info_pane.setFont(meslolgs);
        scenario_info_pane.SetScrollPane(jScrollPane1);

        javax.swing.GroupLayout scenario_info_paneLayout = new javax.swing.GroupLayout(scenario_info_pane);
        scenario_info_pane.setLayout(scenario_info_paneLayout);
        scenario_info_paneLayout.setHorizontalGroup(
            scenario_info_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 504, Short.MAX_VALUE)
        );
        scenario_info_paneLayout.setVerticalGroup(
            scenario_info_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 617, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(scenario_info_pane);

        world_logs.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        logs_tab_container.addTab("World Logs", world_logs);

        negotiation_logs.setLayout(new java.awt.BorderLayout());

        negotiation_info_pane.setFont(meslolgs);
        jScrollPane4.setViewportView(negotiation_info_pane);

        negotiation_logs.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        logs_tab_container.addTab("Negotiation Logs", negotiation_logs);

        horizontal_spliter.setRightComponent(logs_tab_container);
        logs_tab_container.getAccessibleContext().setAccessibleName("World Info");

        scenario_info_container.add(horizontal_spliter);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        run_scenario.add(scenario_info_container, gridBagConstraints);

        run_controls.setMinimumSize(new java.awt.Dimension(100, 40));
        run_controls.setPreferredSize(new java.awt.Dimension(600, 40));
        run_controls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        back_to_overview_btn.setText("Back");
        back_to_overview_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_to_overview_btnActionPerformed(evt);
            }
        });
        run_controls.add(back_to_overview_btn);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        run_scenario.add(run_controls, gridBagConstraints);

        cards_container.add(run_scenario, "run");

        getContentPane().add(cards_container, java.awt.BorderLayout.CENTER);

        jMenu1.setText("Options");

        export_btn.setText("Export");
        export_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                export_btnActionPerformed(evt);
            }
        });
        jMenu1.add(export_btn);

        import_btn.setText("Import");
        import_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                import_btnActionPerformed(evt);
            }
        });
        jMenu1.add(import_btn);

        jMenu1.getPopupMenu().setLightWeightPopupEnabled(false);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //<editor-fold defaultstate="collapsed" desc="On Window Closing">
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        OnClose();
    }//GEN-LAST:event_formWindowClosing
    //</editor-fold>

    private void generate_scenario_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_run_scenario_btnActionPerformed
        GenerateScenario();
    }//GEN-LAST:event_run_scenario_btnActionPerformed

    //<editor-fold defaultstate="collapsed" desc="Import BTN Action Performed">
    private void import_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_import_btnActionPerformed
        // TODO flush data

        // switch to first page
        ((CardLayout) cards_container.getLayout()).show(cards_container, "create");

        // define folder path
        File mapp_folder = new File(java.nio.file.Paths.get(new JFileChooser().getFileSystemView().getDefaultDirectory().toString(), "MAPP").toString());
        if (!mapp_folder.exists()) mapp_folder.mkdirs();

        // open file picker and select .json file to import scenario config from
        file_chooser.setFileFilter(new FileNameExtensionFilter("JSON", "json"));
        file_chooser.setCurrentDirectory(mapp_folder);
        int return_val = file_chooser.showOpenDialog(this);
        if (return_val == JFileChooser.APPROVE_OPTION) {
            // open & import file
            File import_file = file_chooser.getSelectedFile();

            // do not open if it is not a json file
            if (!import_file.getAbsolutePath().endsWith(".json")) return;

            try {
                FileReader reader = new FileReader(import_file);
                Gson gson = new Gson();

                JSONSessionConfig config = gson.fromJson(reader, JSONSessionConfig.class);
                reader.close();

                world_data = config.world;
                agents_data = new ArrayList<>();

                for (int i = 0; i < config.agents.length; i++) {
                    config.agents[i].agent_name = config.agents[i].agent_name.replaceAll("-", "_");
                }

                Collections.addAll(agents_data, config.agents);

                DisplayImportedData();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_import_btnActionPerformed
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Export BTN Action Performed">
    private void export_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_export_btnActionPerformed
        // open file picker and select .json file to export scenario config to
        String wid = String.valueOf(System.currentTimeMillis());

        // define folder path
        File mapp_folder = new File(java.nio.file.Paths.get(new JFileChooser().getFileSystemView().getDefaultDirectory().toString(), "MAPP").toString());
        if (!mapp_folder.exists()) mapp_folder.mkdirs();

        file_chooser.setSelectedFile(new File("world-scenario-"+wid+".json"));
        file_chooser.setCurrentDirectory(mapp_folder);
        int return_val = file_chooser.showSaveDialog(this);
        if (return_val == JFileChooser.APPROVE_OPTION) {
            // open & write to file
            File export_file;
            if (file_chooser.getSelectedFile().getPath().endsWith(".json")) {
                export_file = file_chooser.getSelectedFile();
            } else {
                export_file = new File(file_chooser.getSelectedFile().getPath() + ".json");
            }

            SaveScenario(
                export_file,
                agents_data.stream().peek(AgentConfig::gen_path).toArray(AgentConfig[]::new),
                world_data
            );
        }
    }//GEN-LAST:event_export_btnActionPerformed
    //</editor-fold >

    private void run_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_run_btnActionPerformed
        ((CardLayout) cards_container.getLayout()).show(cards_container, "run");
        RunScenario();
    }//GEN-LAST:event_run_btnActionPerformed

    private void previous_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previous_btnActionPerformed
        ((CardLayout) cards_container.getLayout()).show(cards_container, "create");
    }//GEN-LAST:event_previous_btnActionPerformed

    private void back_to_overview_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_to_overview_btnActionPerformed
        ((CardLayout) cards_container.getLayout()).show(cards_container, "overview");

        if (world != null)
        {
            world = world.Flush();
        }
    }//GEN-LAST:event_back_to_overview_btnActionPerformed

    private void btn_cycle_statesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_btn_cycle_statesItemStateChanged
        int state = evt.getStateChange();

        if (state == ItemEvent.SELECTED)
        {
            if (world != null)
            {
                world.Loop();
            }
        }
        if (state == ItemEvent.DESELECTED)
        {
            if (world != null)
            {
                world.Stop();
            }
        }
    }//GEN-LAST:event_btn_cycle_statesItemStateChanged

    private void btn_next_stateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_next_stateActionPerformed
        if (world != null)
        {
            world.Step();
        }
    }//GEN-LAST:event_btn_next_stateActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        if (scenario_canvas != null) scenario_canvas.Resize();
    }//GEN-LAST:event_formComponentResized

    private void splitterPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_splitterPropertyChange
        if (scenario_canvas != null) scenario_canvas.Resize();
    }//GEN-LAST:event_splitterPropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            boolean isLookAndFeelSet = false;
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    isLookAndFeelSet = true;
                    break;
                }
                if ("GTK+".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    isLookAndFeelSet = true;
                    break;
                }
            }
            if (!isLookAndFeelSet) {
                logger.error("Unable to set LookAndFeel");
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScenarioManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new ScenarioManager().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable agent_detail_table;
    private javax.swing.JTable agents_table;
    private javax.swing.JToggleButton btn_cycle_states;
    private javax.swing.JButton btn_next_state;
    private javax.swing.JPanel cards_container;
    private javax.swing.JFileChooser file_chooser;
    private javax.swing.JButton generate_scenario_btn;
    private javax.swing.JTextField height_input;
    private edu.ozu.mapp.agent.client.world.WorldHistoryPanel history_panel;
    private javax.swing.JSplitPane horizontal_spliter;
    private javax.swing.JTextField input_field_of_view;
    private javax.swing.JTextField input_initial_token_count_per_agent;
    private javax.swing.JTextField input_number_of_expected_conflicts;
    private javax.swing.JLabel label_current_state;
    private javax.swing.JTextField max_path_length_input;
    private javax.swing.JLabel max_path_length_label;
    private javax.swing.JTextField min_dist_bw_agents;
    private javax.swing.JTextField min_path_length_input;
    private javax.swing.JLabel min_path_length_label;
    private javax.swing.JTextPane negotiation_info_pane;
    private javax.swing.JLabel number_of_agents_label;
    private javax.swing.JLabel number_of_conflicts_label;
    private javax.swing.JPanel overview_scenario;
    private javax.swing.JDialog popup_generating;
    private edu.ozu.mapp.agent.client.world.ScenarioCanvas scenario_canvas;
    private edu.ozu.mapp.agent.client.world.LogDisplayPane scenario_info_pane;
    private javax.swing.JSplitPane vertical_spliter;
    private javax.swing.JTextField width_input;
    private javax.swing.JPanel world_view_tab;
    // End of variables declaration//GEN-END:variables

    private LinkedHashMap<String, Class<? extends Agent>> agents_map = new LinkedHashMap<>();
    private void onComponentsDidMount()
    {
        logger.debug("searching classes");
        FindClasses();
        logger.debug("classes found are");
        logger.debug(agents_map.toString());

        AgentsTableModel table = new AgentsTableModel(agents_map.keySet().toArray(new String[0]));
        if (agents_table != null) agents_table.setModel(table);
    }

    //<editor-fold defaultstate="collapsed" desc="Find Agent Classes">
    private void FindClasses()
    {
        String[] packages = new String[]{"mappagent.sample", "mapp.agent"};
        HashMap<String, Class<? extends Agent>> agents = new HashMap<>();

        ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(true);
        scanner.addIncludeFilter(new AnnotationTypeFilter(MAPPAgent.class));

        try {
            for (String basePackage : packages) {
                for (BeanDefinition bd : scanner.findCandidateComponents(basePackage)) {
                    agents.put(Objects.requireNonNull(bd.getBeanClassName()), (Class<? extends Agent>) Class.forName(bd.getBeanClassName()));
                }
            }
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }

        agents_map = agents.entrySet().stream().sorted(Map.Entry.comparingByKey()).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (o, n) -> o, LinkedHashMap::new));
    }
    //</editor-fold>

    private void OnClose()
    {
//        if (world_listener != null)  world_listener.close();
        if (scenario_canvas != null) scenario_canvas.Destroy();
    }

    private WorldOverseer world;
    private WorldConfig world_data;
    private int agent_count = 0; // track number of agents there should be
    private int number_of_expected_conflicts = 0;
    private ArrayList<AgentConfig> agents_data = new ArrayList<>();

    /**
     * Invoked before switching to overview card.
     * Only input values are present when this function
     * is first invoked
     * */
    private void GenerateScenario()
    {
        String wid = String.valueOf(System.currentTimeMillis());

        Globals.FIELD_OF_VIEW_SIZE = Integer.parseInt(input_field_of_view.getText());
        Globals.BROADCAST_SIZE     = Globals.FIELD_OF_VIEW_SIZE;

        // fetch scenario information
        int width, height, min_path_len, max_path_len, min_dist_bw, initial_token_c;
        try {
            width        = Integer.parseInt(width_input.getText());
            height       = Integer.parseInt(height_input.getText());
            min_path_len = min_path_length_input.getText().isEmpty() ? 0 : Integer.parseInt(min_path_length_input.getText());
            max_path_len = max_path_length_input.getText().isEmpty() ? 0 : Integer.parseInt(max_path_length_input.getText());
            min_dist_bw  = min_dist_bw_agents.getText().isEmpty() ? 0 : Integer.parseInt(min_dist_bw_agents.getText());
            initial_token_c = input_initial_token_count_per_agent.getText().isEmpty() ? Globals.INITIAL_TOKEN_BALANCE : Integer.parseInt(input_initial_token_count_per_agent.getText());
        } catch (NumberFormatException ex) {
            logger.error("Encountered following error, stopping Scenario Generation");
            ex.printStackTrace();
            return;
        }

        number_of_expected_conflicts = input_number_of_expected_conflicts.getText().isEmpty() ? 0 : Integer.parseInt(input_number_of_expected_conflicts.getText());

        Object[][] table_data = GetAgentCount();

        generateScenario(wid, width, height, min_path_len, max_path_len, min_dist_bw, initial_token_c, number_of_expected_conflicts, table_data)
            .thenAccept(data -> {
                agents_data = data;

                if (data != null && !is_headless) { ShowOverviewCard(); }
                // todo do not switch if not ok
            })
        ;
    }

    public CompletableFuture<ArrayList<AgentConfig>> generateScenario(String world_id, int width, int height, int min_path_len, int max_path_len, int min_dist_bw, int initial_token_c, int number_of_expected_conflicts, Object[][] table_data)
    {
        world_data = new WorldConfig(world_id, width, height, min_path_len, min_dist_bw);
        world_data.max_path_len = max_path_len;
        world_data.initial_token_c = initial_token_c;

        if (agent_count == 0) return CompletableFuture.supplyAsync(() -> null);
        world_data.agent_count = agent_count;

        // Get number of possible initial conflicts
        int max_number_of_possible_conflicts = (agent_count * (agent_count - 1)) / 2;
        if (number_of_expected_conflicts > max_number_of_possible_conflicts)
        {
            number_of_expected_conflicts = max_number_of_possible_conflicts;
        }

        // display loading
        if (popup_generating != null) popup_generating.setLocationRelativeTo(this);
        if (popup_generating != null) popup_generating.setVisible(true);

        int final_number_of_expected_conflicts = number_of_expected_conflicts;
        return CompletableFuture
            .supplyAsync(() -> {
                boolean isOk;

                ArrayList<Point[]> AgentLocationData = new LocationDataGenerator(world_data, final_number_of_expected_conflicts).GenerateAgentLocationData(width, height);
                isOk = AgentLocationData.size() > 0;

                ArrayList<AgentConfig> data = null;
                if (isOk) {
                    data = InitializeAgentData(AgentLocationData, table_data);
                }

                return data;
            });
    }

    //<editor-fold defaultstate="collapsed" desc="Generate Scenario functions">
    private Object[][] GetAgentCount()
    {
        Object[][] table_data = new Object[agents_table.getRowCount()][2];

        int _ac = 0;
        for (int row = 0; row < agents_table.getRowCount(); row++)
        {
            int __ac = Integer.parseInt((String) agents_table.getValueAt(row, 1));
            _ac += __ac;

            table_data[row][0] = agents_table.getValueAt(row, 0);
            table_data[row][1] = __ac;
        }
        agent_count = _ac;

        return table_data;
    }

    private ArrayList<AgentConfig> InitializeAgentData(ArrayList<Point[]> AgentLocationData, Object[][] table_data)
    {
        int id_count = 0;
        Iterator<Point[]> AgentLocationDataIterator = AgentLocationData.iterator();
        ArrayList<AgentConfig> agents_data = new ArrayList<>();
        for (int row = 0; row < table_data.length; row++)
        {
            String agent_class_name = (String) table_data[row][0];
            int agent_count = (int) table_data[row][1];

            for (int i = 0; i < agent_count; i++)
            {
                if (!AgentLocationDataIterator.hasNext()) {
                    // error
                    logger.error("NOT ENOUGH LOCATIONS WERE GENERATED");
                    System.exit(1);
                }
                Point[] locPair = AgentLocationDataIterator.next();

                Point start = locPair[0];
                Point dest = locPair[1];

                String[] class_name = agent_class_name.split("\\.");
                String agent_name = class_name[class_name.length - 1] + "_" + row + "" + i;

                logger.info("Creating config for " + agent_name + " | " + start + "->" + dest);
                if (world != null) world.Log(String.format("generated %s %s -> %s", agent_name, start.key, dest.key));

                AgentConfig data = new AgentConfig(id_count++, agent_name, agent_class_name, world_data.initial_token_c, start, dest);
                agents_data.add(data);
            }
        }

        return agents_data;
    }
    //</editor-fold>

    private TextPaneLogFormatter text_pane_formatter;
    private void InitializeWorld()
    {
        text_pane_formatter = new TextPaneLogFormatter();
        text_pane_formatter.scenario_info_pane = scenario_info_pane;
        text_pane_formatter.negotiation_info_pane = negotiation_info_pane;

//        world = new World();
        world = WorldOverseer.getInstance();
        world.SetOnLoopingStop(() -> generate_scenario_btn.setEnabled(true));
        world.SetLogDrawCallback((data) -> text_pane_formatter.format(data));
        world.SetCurrentStateChangeCallback((state) -> label_current_state.setText(state));
        world.SetCanvasUpdateCallback(() -> scenario_canvas.Update());
        world.SetSnapshotHook((label, data) -> history_panel.SetSnapshot(label , data));

        scenario_canvas.SetWorldRef(world);
        scenario_canvas.SetWorldData(world_data);
        scenario_canvas.SetAgentsData(agents_data);
        scenario_canvas.Init();
    }

    private void ShowOverviewCard()
    {
        // switch card to overview
        ((CardLayout) cards_container.getLayout()).show(cards_container, "overview");

        // prepare overview
        PopulateOverviewCard();
        AgentDetailsTableModel table = new AgentDetailsTableModel(
                agents_data.toArray(new AgentConfig[0]),
                (index, data) -> {
                    agents_data.get(index).agent_name   = data.agent_name;
                    agents_data.get(index).start        = data.start;
                    agents_data.get(index).dest         = data.dest;
                    agents_data.get(index).token_c      = data.token_c;

                    PopulateOverviewCard();
                });
        agent_detail_table.setModel(table);

        // clear loading indicator
        popup_generating.setVisible(false);
    }

    @SuppressWarnings("Duplicates")
    private void PopulateOverviewCard()
    {
        logger.debug("Populating Overview Card");

        // populate number of agents
        number_of_agents_label.setText(String.valueOf(world_data.agent_count));

        int conflict_counter = 0;
        int max_path_len = Integer.MIN_VALUE;
        int min_path_len = Integer.MAX_VALUE;

        // TODO
        // we can manually calculate each path as we now are
        // sure that their path calcs are done by A*
        // however, if in the feature an agent overrides its impl
        // this approach will be wrong
        // then it would also mean to allocate agents BEFORE event
        // starting the sim.... and other stuff.... lord...
        HashMap<Integer, String[]> agent_paths = new HashMap<>();
        for (int i = 0; i < agents_data.size(); i++)
        {
            AgentConfig a = agents_data.get(i);
            String[] a_path;
            if (agent_paths.containsKey(a.id)) {
                a_path = agent_paths.get(a.id);
            } else {
                a_path = new AStar().calculate(a.start.toPoint(), a.dest.toPoint(), world_data.width+"x"+world_data.height).toArray(new String[0]);
                agent_paths.put(a.id, a_path);
            }
            agents_data.get(i).path_length = a_path.length;

            // check for max
            if (a_path.length > max_path_len) {
                max_path_len = a_path.length;
            }
            // check for min
            if (a_path.length < min_path_len) {
                min_path_len = a_path.length;
            }

            for (int j = i + 1; j < agents_data.size(); j++)
            {
                AgentConfig b = agents_data.get(j);
                String[] b_path;
                if (agent_paths.containsKey(b.id)) {
                    b_path = agent_paths.get(b.id);
                } else {
                    b_path = new AStar().calculate(b.start.toPoint(), b.dest.toPoint(), world_data.width+"x"+world_data.height).toArray(new String[0]);
                    agent_paths.put(b.id, b_path);
                }

                logger.debug(String.format("Processing %s and %s", i, j));

                ConflictInfo info = new ConflictCheck().check(a_path, b_path);
                if (info.hasConflict) conflict_counter++;
            }
        }

        // populate conflict counter
        number_of_conflicts_label.setText(String.valueOf(conflict_counter));
        // populate max agent path length
        max_path_length_label.setText(String.valueOf(max_path_len));
        // populate min agent path length
        min_path_length_label.setText(String.valueOf(min_path_len));
    }

    private void RunScenario()
    {
        generate_scenario_btn.setEnabled(false);

        String worldID = "world:" + world_data.world_id + ":";

        // initialize world
        if (world == null) InitializeWorld();
        world.Create(world_data.world_id, world_data.width, world_data.height);

        HashMap<String, AgentClient> agent_refs = new HashMap<>();
        for (AgentConfig data : agents_data) {
            try {
                world.Log(String.format("initializing %20s from %-10s -> to %-10s", data.agent_name, data.start, data.dest));
                AgentClient client = new AgentClient(
                    agents_map
                        .get(data.agent_class_name)
                        .getDeclaredConstructor(String.class, String.class, Point.class, Point.class, int.class)
                        .newInstance(data.agent_name, data.agent_name, new Point(data.start.get(), "-"), new Point(data.dest.get(), "-"), data.token_c)
                );
                client.Join(world);
                agent_refs.put(data.agent_name, client);
            } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {
                logger.error("An error occurred while trying to generate a client");
                e.printStackTrace();
                System.exit(1);
            }
        }
        world.Run();
        scenario_canvas.SetAgentRefs(agent_refs);
    }

    //<editor-fold defaultstate="collapsed" desc="Update Create Card info for Import">
    private void DisplayImportedData() {
        width_input.setText(String.valueOf(world_data.width));
        height_input.setText(String.valueOf(world_data.height));
        min_path_length_input.setText(String.valueOf(world_data.min_path_len));
        max_path_length_input.setText(String.valueOf(world_data.max_path_len));
        min_dist_bw_agents.setText(String.valueOf(world_data.min_distance_between_agents));
        input_initial_token_count_per_agent.setText(String.valueOf(world_data.initial_token_c));

        if (world == null) InitializeWorld();

        HashMap<String, Integer> agent_counts = new HashMap<>();
        for (AgentConfig data : agents_data) {
            agent_counts.put(data.agent_class_name, agent_counts.getOrDefault(data.agent_class_name, 0) + 1);
            if (world != null) world.Log(String.format("imported %s %s -> %s", data.agent_name, data.start, data.dest));
        }

        AgentsTableModel model = (AgentsTableModel) agents_table.getModel();
        for (int row = 0; row < agents_table.getRowCount(); row++) {
            String agent_class_name = (String) agents_table.getValueAt(row, 0);

            if (agent_counts.containsKey(agent_class_name)) {
                model.setValueAt(String.valueOf(agent_counts.get(agent_class_name)), row, 1);
            }
        }

        ShowOverviewCard();
    }
    //</editor-fold>

    public void SaveScenario(AgentConfig[] agents_config, WorldConfig world_config)
    {
        String timestamp = String.valueOf(System.currentTimeMillis());

        File file = new File(
            java.nio.file.Paths.get(
                new JFileChooser().getFileSystemView().getDefaultDirectory().toString(),
                "MAPP",
                "world-scenario-" + timestamp + ".json"
            ).toString()
        );

        SaveScenario(file, agents_config, world_config);
    }

    public void SaveScenario(File save_destination, AgentConfig[] agents_data, WorldConfig world_data)
    {
        JSONSessionConfig config = new JSONSessionConfig();
        config.agents = agents_data;
        config.world  = world_data;

        try {
            logger.debug("Writing config");
            logger.debug(config.toString());
            logger.debug("To file " + save_destination);

            FileWriter writer = new FileWriter(save_destination);
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            gson.toJson(config, writer);
            writer.append("\n");
            writer.flush();
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public WorldConfig getWorldData()
    {
        return world_data;
    }

    public Object[][] getAgentClassesList()
    {
        Object[][] agents = new Object[agents_map.keySet().size()][2];

        int idx = 0;
        for (String key : agents_map.keySet())
        {
            agents[idx][0] = key;
            agents[idx][1] = 0;

            idx++;
        }

        return agents;
    }
}

@SuppressWarnings({"FieldMayBeFinal", "unused"})
class AgentsTableModel extends AbstractTableModel
{
    //<editor-fold defaultstate="collapsed" desc="implementation">
    private boolean[][] editable_cells; // 2d array to represent rows and columns
    private String[] columns = new String[]{"Agent Class", "Count"};
    private ArrayList<Object[]> rows = new ArrayList<>();

    AgentsTableModel(String[] agents)
    {
        editable_cells = new boolean[agents.length][columns.length];

        for (int i = 0; i < agents.length; i++) {
            rows.add(new Object[]{agents[i], 0});
            editable_cells[i][0] = false;
            editable_cells[i][1] = true;
        }
    }

    @Override
    public Object getValueAt(int row, int col)
    {
        return rows.get(row)[col].toString();
    }

    @Override
    public void setValueAt(Object o, int row, int col)
    {
        if (o instanceof String)
            rows.get(row)[col] = Integer.parseInt(String.valueOf(o));
        this.fireTableCellUpdated(row, col);
    }

    public void setCellEditable(int row, int col, boolean value)
    {
        this.rows.get(row)[col] = value;
        this.fireTableCellUpdated(row, col);
    }

    @Override
    public String getColumnName(int column) {
        return columns[column];
    }

    @Override
    public int getRowCount() {
        return rows.size();
    }

    @Override
    public int getColumnCount() {
        return columns.length;
    }

    @Override
    public boolean isCellEditable(int row, int column)
    {
        return this.editable_cells[row][column];
    }
    //</editor-fold>
}

@SuppressWarnings({"FieldMayBeFinal", "unused"})
class AgentDetailsTableModel extends AbstractTableModel
{
    //<editor-fold defaultstate="collapsed" desc="implementation">
    private final AgentConfig[] agents;
    private boolean[][] editable_cells;
    private String[] columns = new String[]{"Agent Name", "Start", "Dest", "Path len", "# of Tokens"};
    private ArrayList<Object[]> rows = new ArrayList<>();

    private BiConsumer<Integer, AgentConfig> update_callback;

    AgentDetailsTableModel(AgentConfig[] agents, BiConsumer<Integer, AgentConfig> callback)
    {
        this.agents = agents;
        update_callback = callback;
        editable_cells = new boolean[agents.length][columns.length];

        for (int i = 0; i < agents.length; i++)
        {
            double dist = agents[i].start.toPoint().ManhattanDistTo(agents[i].dest.toPoint()) + 1; // +1 to include initial location
            rows.add(new Object[]{
                    agents[i].agent_name,
                    String.format("%s,%s", agents[i].start.x, agents[i].start.y),
                    String.format("%s,%s", agents[i].dest.x, agents[i].dest.y),
                    String.valueOf((int) dist),
                    String.valueOf(agents[i].token_c),
            });
            editable_cells[i][0] = true;    // Agent Name
            editable_cells[i][1] = true;    // Start
            editable_cells[i][2] = true;    // Dest
            editable_cells[i][3] = false;   // Path length
            editable_cells[i][4] = true;    // # of Tokens
        }
    }

    @Override
    public int getRowCount() {
        return rows.size();
    }

    @Override
    public int getColumnCount() {
        return columns.length;
    }

    @Override
    public String getColumnName(int column) {
        return columns[column];
    }

    @Override
    public Object getValueAt(int row, int col) {
        return rows.get(row)[col].toString();
    }

    @Override
    public void setValueAt(Object o, int row, int col)
    {
        if (o instanceof String)
        {
            String val = String.valueOf(o);
            // handle start & dest change
            rows.get(row)[col] = val;

            if (col == 0) agents[row].agent_name = val;
            if (col == 1) agents[row].update_start(val);
            if (col == 2) agents[row].update_dest(val);
            // cant edit path name
            if (col == 4) agents[row].token_c = Integer.parseInt(val);

            rows.get(row)[3] = agents[row].path_length;

            update_callback.accept(row, agents[row]);
        }

        this.fireTableCellUpdated(row, col);
    }

    public void setCellEditable(int row, int col, boolean value) {
        this.rows.get(row)[col] = value;
        this.fireTableCellUpdated(row, col);
    }

    @Override
    public boolean isCellEditable(int row, int column)
    {
        return this.editable_cells[row][column];
    }
    //</editor-fold>
}
