/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ozu.mapp.agent.client.world;

import edu.ozu.mapp.agent.client.AgentClient;
import edu.ozu.mapp.system.Colors;
import edu.ozu.mapp.system.WorldOverseer;
import edu.ozu.mapp.config.AgentConfig;
import edu.ozu.mapp.utils.JSONWorldData;
import edu.ozu.mapp.utils.Path;
import edu.ozu.mapp.utils.Point;

import java.awt.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;

/**
 *
 * @author freedrone
 */
public class ScenarioCanvas extends javax.swing.JPanel
{
    private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(ScenarioCanvas.class);

    /**
     * Creates new form ScenarioCanvas
     */
    public ScenarioCanvas() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(100, 100));
        setPreferredSize(new java.awt.Dimension(100, 100));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private JSONWorldData world;
    private WorldOverseer world_ref;

    // { 'AGENT_ID': [ 'X-Y' , ... ] }
    private HashMap<String, Path>           history         = new HashMap<>();
    private HashMap<String, AgentConfig>  agents_data     = new HashMap<>();
    private HashMap<String, AgentClient>    agent_refs      = new HashMap<>();
    private HashMap<String, Point[]>        agents          = new HashMap<>();
    private HashMap<String, String>         agent_colors    = new HashMap<>();

    private int offset = 1;
    private String[] agent_keys;

    public void SetWorldData(JSONWorldData world_data)
    {
        this.world = world_data;
        logger.debug("world.world_id = " + world.world_id);
    }

    public void SetAgentsData(ArrayList<AgentConfig> agents_data)
    {
        int idx = 0;
        for (AgentConfig agent_data : agents_data)
        {
            String agent_key = agent_data.agent_name.replace("agent:", "");

            this.agents_data.put(agent_key, agent_data);

            String agent_hex_color = edu.ozu.mapp.system.Colors.get(idx);

            this.agent_colors.put(agent_key, agent_hex_color);
            idx += 1;
        }
    }

    @SuppressWarnings("DuplicatedCode")
    @Override
    public void paint(Graphics graphics)
    {
        super.paint(graphics);

        if (world == null) return;

        // PREPROCESS
        Graphics2D g = (Graphics2D) graphics.create();

        int width   = world.width;
        int height  = world.height;

        int cell_size = calculate_cell_size();

        // DRAW CELL BORDERS
        for (int i = 0; i <= world.width; i++)
        {
            g.setColor(Color.BLACK);
            g.drawLine((offset + i * cell_size), offset, (offset + i * cell_size), (offset + cell_size * height));
            g.drawLine(offset, (offset + i * cell_size), (offset + cell_size * width), (offset + i * cell_size));
        }

        for (String agent_key: agent_keys)
        {
            Point[] broadcast = agents.get(agent_key);

            Color color = Colors.hex2rgb(agent_colors.get(agent_key));
            if (color == null) {
                color = Colors.hex2rgb(get_color(agent_key));
            }

            g.setColor(color);
            g.setStroke(new BasicStroke());

            ArrayList<Point> agent_planned_path = null;
            if (agent_refs.containsKey(agent_key)) agent_planned_path = agent_refs.get(agent_key).GetAgentPlannedPath();
            if (agent_planned_path == null) agent_planned_path = new ArrayList<>();

            Path path = new Path(agent_planned_path);
            int T = 0;
            boolean is_planned = false;
            for (int i = 0; i < path.size(); i++)
            {
                Point curr = path.get(i);

                if (curr.equals(broadcast[0]))
                {
                    // will be drawing broadcast path from now on
                    is_planned = true;
                    T = i + broadcast.length-1;

                    // DRAW AGENT CURRENT LOCATION
                    g.fillOval((curr.x * cell_size), (curr.y * cell_size), cell_size, cell_size);

                    // DRAW AGENT CURRENT LOCATION IDENTIFIER
                    g.setColor(Color.RED);
                    g.drawString(agent_key.split("_")[1], ((curr.x * cell_size) + 2), ((curr.y * cell_size) + 13));

                    g.setColor(color);
                }

                if (i + 1 >= path.size())
                {
                    // DRAW AGENT TARGET LOCATION
                    g.fillRect(
                        (offset + (curr.x * cell_size) + (int) (cell_size * 0.25)),
                        (offset + (curr.y * cell_size) + (int) (cell_size * 0.25)),
                        (int) (cell_size * 0.5),
                        (int) (cell_size * 0.5)
                    );
                    continue;
                }

                // DRAW AGENT PATH
                if (is_planned && i + 1 > T)
                {
                    Stroke dashed = new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_ROUND, 1, new float[]{2f, 0f, 2f}, 2f);
                    g.setStroke(dashed);
                }

                Point next = path.get(i + 1);
                g.drawLine(
                    ((curr.x * cell_size) + (cell_size / 2)), ((curr.y * cell_size) + (cell_size / 2)),
                    ((next.x * cell_size) + (cell_size / 2)), ((next.y * cell_size) + (cell_size / 2))
                );
            }
        }
    }

    private String get_color(String agent_key)
    {
        String hex = Colors.get(agent_colors.keySet().size());
        agent_colors.put(agent_key, hex);

        return hex;
    }

    public void Init()
    {
        CompletableFuture
            .runAsync(() -> {
                try {
                    do {
                        TimeUnit.MILLISECONDS.sleep(100);

                        Update();
                    } while (agents.size() != world.agent_count);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            })
        ;
    }

    public void Update()
    {
        if (world_ref == null) return;

        agents = world_ref.GetAllBroadcasts();
        agents.keySet().forEach(agent_name -> {
            if (!history.containsKey(agent_name)) history.put(agent_name, new Path());
        });
        agent_keys = agents.keySet().toArray(new String[0]);
        Arrays.sort(agent_keys);

        this.repaint();
    }

    public void Resize() { }

    public void Destroy() { }

    private Color hex2rgb(String hex)
    {
        return new Color(
                Integer.valueOf(hex.substring(1, 3), 16),
                Integer.valueOf(hex.substring(3, 5), 16),
                Integer.valueOf(hex.substring(5, 7), 16)
        );
    }

    private String rgb2hex(int r, int g, int b)
    {
        return String.format("#%02x%02x%02x", r, g, b);
    }

    private final HashMap<String, Integer> cell_size_mem = new HashMap<>();
    private int calculate_cell_size()
    {
        int canvas_height = this.getHeight()- 3;
        int canvas_width  = this.getWidth() - 3;

        Integer cell_size = cell_size_mem.get(String.format("%s-%s", canvas_width, canvas_height));
        if (cell_size == null)
        {
            int shortest_corner = Math.min(canvas_height, canvas_width);
            int divider = Math.max(world.height, world.width);

            cell_size = shortest_corner / divider;

            cell_size_mem.put(String.format("%s-%s", canvas_width, canvas_height), cell_size);
        }

        return cell_size;
    }

    private Point[] String2BroadcastArray(String str)
    {
        return Arrays
                .stream(
                    str
                        .replaceAll("([\\[\\]]*)", "")
                        .split(",")
                )
                .map(p -> new Point(p, "-"))
                .toArray(Point[]::new)
        ;
    }

    public void SetAgentRefs(HashMap<String, AgentClient> agent_refs)
    {
        this.agent_refs = agent_refs;
    }

    public void SetWorldRef(WorldOverseer world) {
        this.world_ref = world;
    }
}
