/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ozu.drone.client.world;

import redis.clients.jedis.Jedis;

import javax.swing.*;
import java.awt.*;
import java.util.Map;
import java.util.stream.Collectors;

/**
 *
 * @author freedrone
 */
public class WorldHandler extends javax.swing.JFrame {
    private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(WorldHandler.class);

    private final String REDIS_HOST = "localhost";
    private RedisListener redisListener;
    private redis.clients.jedis.Jedis jedis;
    private boolean isJedisOK = true;
    /**
     * Creates new form WorldHandler
     */
    public WorldHandler()
    {
        initComponents();
        onComponentsDidMount();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        cards_container = new javax.swing.JPanel();
        javax.swing.JPanel create = new javax.swing.JPanel();
        world_id = new javax.swing.JTextField();
        javax.swing.JButton create_btn = new javax.swing.JButton();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        javax.swing.JPanel controller = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane2 = new javax.swing.JScrollPane();
        text_view = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        cards_container.setMinimumSize(new java.awt.Dimension(400, 300));
        cards_container.setName(""); // NOI18N
        cards_container.setOpaque(false);
        cards_container.setLayout(new java.awt.CardLayout());

        java.awt.GridBagLayout createLayout = new java.awt.GridBagLayout();
        createLayout.columnWidths = new int[] {0, 5, 0, 5, 0};
        createLayout.rowHeights = new int[] {0, 5, 0, 5, 0};
        create.setLayout(createLayout);

        world_id.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        world_id.setText("world_id");
        world_id.setToolTipText("");
        world_id.setMinimumSize(new java.awt.Dimension(200, 37));
        world_id.setPreferredSize(new java.awt.Dimension(200, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        create.add(world_id, gridBagConstraints);

        create_btn.setText("CREATE");
        create_btn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        create_btn.setIconTextGap(10);
        create_btn.setPreferredSize(new java.awt.Dimension(100, 35));
        create_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                create_btnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        create.add(create_btn, gridBagConstraints);

        jLabel1.setText("World ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        create.add(jLabel1, gridBagConstraints);

        cards_container.add(create, "create");

        controller.setLayout(new java.awt.GridBagLayout());

        text_view.setEditable(false);
        jScrollPane2.setViewportView(text_view);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 227;
        gridBagConstraints.ipady = 277;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 150);
        controller.add(jScrollPane2, gridBagConstraints);

        cards_container.add(controller, "controller");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cards_container, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cards_container, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void create_btnActionPerformed(java.awt.event.ActionEvent event)
    {//GEN-FIRST:event_create_btnActionPerformed
        CardLayout cl = (CardLayout) cards_container.getLayout();
        cl.show(cards_container, "controller");

        jedis_create_world();
    }//GEN-LAST:event_create_btnActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent event)
    {//GEN-FIRST:event_formWindowClosing
        jedis_delete_world();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WorldHandler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new WorldHandler().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel cards_container;
    private javax.swing.JTextPane text_view;
    private javax.swing.JTextField world_id;
    // End of variables declaration//GEN-END:variables

    void onComponentsDidMount()
    {
        world_id.setText(String.valueOf(System.currentTimeMillis()));

        jedis = new Jedis(REDIS_HOST);
        try {
            jedis.connect();
        } catch (Exception e) {
            logger.error("«can't connect to Redis»");
            isJedisOK = false;
            // TODO pop a dialog window
        }
    }

    void jedis_create_world()
    {
        if (!isJedisOK) { return; }

        String wid = "wid:" + world_id.getText() + ":";
        if (jedis.exists(wid))
        {
            logger.error("«World already exists!»");
            return;
        }
        logger.info("Creating " + wid + " ...");

        jedis.hset(wid, "player_count", "0");
        jedis.hset(wid, "world_state", "0");

        // subscribe(listen) to changes in world key
        redisListener = new RedisListener(
            REDIS_HOST,
            wid,
            (channel, message) -> {
                // update canvas
                logger.info("redis>" + channel + "»" + message + "");

                Map<String, String> data = jedis.hgetAll(wid);

                text_view.setText(
                    data
                        .keySet()
                        .stream()
                        .map(key -> key + ": " + data.get(key))
                        .collect(Collectors.joining("\n"))
                );
        });
        redisListener.run();
    }

    void jedis_delete_world()
    {
        if (!isJedisOK) { return; }

        String wid = "wid:" + world_id.getText() + ":";
        logger.info("Deleting " + wid + " ...");

        redisListener.close();
        jedis.del(wid, wid+"map", wid+"notify", wid+"path", wid+"session_keys");
    }
}
